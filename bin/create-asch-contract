#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const inquirer = require('inquirer')
const username = require('username')
const shell = require('shelljs')
const program = require('commander')
const chalk = require('chalk')
const AschContract = require('asch-contract').AschContract

const pkg = require('../template/package')

program
  .version(pkg.version)
  .usage('[command] <option>')

program
  .command('init [contractName]')
  .description('create a new contract')
  .action(function (contractName) {
    createContract(contractName)
  })

program
  .command('verify [myContract.ts]')
  .description('verify a contract code')
  .action(function (filename) {
    const filepath = path.join(process.cwd(), filename)
    const contractCode = fs.readFileSync(filepath, { encoding: 'utf8' })

    verifyContract(contractCode)
      .then((result) => {
        if (result.success) {
          console.log(chalk.green(`Verify success! consumed ${result.gas} gas.`))
        } else {
          console.error(chalk.red(result.error))
        }
      })
      .catch(e => {
        console.error(e)
      })
  })

if (process.argv.length <= 2) {
  program.outputHelp()
}

program
  .command('*')
  .action(function (env) {
    program.outputHelp()
  })

program.parse(process.argv)

function createContract (contractName) {
  inquirer.prompt([
    {
      type: 'input',
      name: 'name',
      message: 'contract name',
      default: contractName || 'my-asch-contract'
    },
    {
      type: 'input',
      name: 'version',
      message: 'version',
      default: pkg.version
    },
    {
      type: 'input',
      name: 'description',
      message: 'description',
      default: pkg.description
    },
    {
      type: 'input',
      name: 'author',
      message: 'author',
      default: username.sync()
    },
    {
      type: 'input',
      name: 'license',
      message: 'license',
      default: pkg.license
    }
  ])
    .then(answers => {
      const dir = path.join(process.cwd(), answers.name)
      shell.mkdir('-p', dir)
      shell.cp('-R', path.join(__dirname, '../template/*'), dir)
      Object.assign(pkg, answers)
      shell.cd(dir)
      shell.ShellString(JSON.stringify(pkg, null, 2)).to('package.json')
      const child = shell.exec('npm i', { async: true })
      shell.echo('npm install...')
      child.on('exit', (code) => {
        console.log('done!')
      })
    })
}

async function verifyContract (contractCode) {
  const sandbox = new AschContract.SandboxConnector({
    entry: require.resolve('asch-contract/sandbox-launcher'),
    dataDir: path.join(__dirname, '../state-db'),
    logDir: path.join(__dirname, '../logs'),
    logConfig: {
      enableContractLogger: false,
      logLevelConfig: { defaultLogLevel: AschContract.LogLevel.none }
    },
    debug: false
  })

  function getContext () {
    return {
      transaction: {
        id: '2f93e9918b43505bcc60e30e92e030eb8721f436b42d04a341da309f7553517c',
        type: 1,
        timestamp: 89024675,
        senderId: 'AC8d6BmvJ4AeftmCNTMVeweCBH96ke2d4D',
        senderPublicKey: 'cb4611c0cc1978bb2d57a18c68481c07a7ed4345e5fb0d51ceeaca6f82a39837',
        fee: 10000000,
        signatures: [
          'a8ef647bbe08d7c37852d145a53fe19a853f7e1378df08d0347a4684d40ca36e1a5e22ddc88bef402b6c5ac494ad3586109a49d34f705388faed96b9d2eca00c'
        ],
        secondSignature: undefined,
        args: [
          '312070000000',
          'AomLjz8o6oPuDZh3JTnaRGGLb7DCfDeyv'
        ],
        height: 7969970,
        message: undefined
      },
      senderAddress: 'senderAddress',
      block: {
        height: 121903,
        delegate: '4110e2ab06a075ff540cbcd9af5d7cce3a416595e7c259f15065895f7c84d16f',
        timestamp: 89149400
      }
    }
  }

  await sandbox.connect()

  try {
    const result = await sandbox.registerContract(10000000, getContext(), 1, 'my_asch_contract', contractCode)
    return result
  } catch (err) {
    throw err
  } finally {
    await sandbox.disconnect()
  }
}
